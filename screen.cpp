
#include "screen.h"


Screen::Screen(Board *new_board) {
    board_obj = new_board;

    SDL_Surface* screen = NULL;
    if(SDL_Init(SDL_INIT_EVERYTHING) != 0)
    {
        std::cout << "ERROR SDL_Init" << std::endl;
        exit(1);
    }

    // create a window
    window = SDL_CreateWindow(
                                           "SDL 2 window",             // window title
                                           SDL_WINDOWPOS_CENTERED,     // x position, centered
                                           SDL_WINDOWPOS_CENTERED,     // y position, centered
                                           960,               // width, in pixels
                                           540,              // height, in pixels
                                           SDL_WINDOW_BORDERLESS | SDL_WINDOW_MAXIMIZED          // flags
                                           );
    //SDL_GetWindowSize(window, &screen_width, &screen_height);

    int x, y;
    SDL_GetWindowSize(window, &x, &y);

    board_obj->set_cell_height(y);
    board_obj->set_cell_width(x);

    screen = SDL_GetWindowSurface(window);
    pixels = (Uint32*)screen->pixels;

    draw_colors = false;
    draw_smooth = false;
    alive_offset = 0;
    dead_offset = 0;
    color_speed_divisor = 1;

    color_scheme = 0;


}

Screen::~Screen() {
    // clean up
    SDL_DestroyWindow(window);

    SDL_Quit();
}


//this function sets the pixels at (x,y) on the board to color accounting for the fact
//that cells are not always 1x1 pixels
void Screen::set_pixel(int x, int y, Uint32 color) {
    pixels[y*board_obj->get_cell_width()+x] = color;
    //just sets the correct block of pixels to the color
    //for(int i = x*PIXELS_PER_CELL; i < x*PIXELS_PER_CELL+PIXELS_PER_CELL; i++) {
    //    for(int j = y*PIXELS_PER_CELL; j < y*PIXELS_PER_CELL+PIXELS_PER_CELL; j++) {
    //        pixels[j*board_obj->get_cell_width()+i] = color;
    //    }
    //}
}


//this function converts a board of cells into a screen's worth of pixels
void Screen::draw_board() {
    static Uint32 colors[10][256] = {{0x000000, 0x070000, 0x0F0000, 0x170000, 0x1F0000, 0x270000, 0x2F0000, 0x370000, 0x3F0000, 0x470000, 0x4F0000, 0x570000, 0x5F0000, 0x670000, 0x6F0000, 0x770000, 0x7F0000, 0x870000, 0x8F0000, 0x970000, 0x9F0000, 0xA70000, 0xAF0000, 0xB70000, 0xBF0000, 0xC70000, 0xCF0000, 0xD70000, 0xDF0000, 0xE70000, 0xEF0000, 0xF70000, 0xFF0000, 0xFF0007, 0xFF000F, 0xFF0017, 0xFF001F, 0xFF0027, 0xFF002F, 0xFF0037, 0xFF003F, 0xFF0047, 0xFF004F, 0xFF0057, 0xFF005F, 0xFF0067, 0xFF006F, 0xFF0077, 0xFF007F, 0xFF0087, 0xFF008F, 0xFF0097, 0xFF009F, 0xFF00A7, 0xFF00AF, 0xFF00B7, 0xFF00BF, 0xFF00C7, 0xFF00CF, 0xFF00D7, 0xFF00DF, 0xFF00E7, 0xFF00EF, 0xFF00F7, 0xFF00FF, 0xF700FF, 0xEF00FF, 0xE700FF, 0xDF00FF, 0xD700FF, 0xCF00FF, 0xC700FF, 0xBF00FF, 0xB700FF, 0xAF00FF, 0xA700FF, 0x9F00FF, 0x9700FF, 0x8F00FF, 0x8700FF, 0x7F00FF, 0x7700FF, 0x6F00FF, 0x6700FF, 0x5F00FF, 0x5700FF, 0x4F00FF, 0x4700FF, 0x3F00FF, 0x3700FF, 0x2F00FF, 0x2700FF, 0x1F00FF, 0x1700FF, 0x0F00FF, 0x0700FF, 0x0000FF, 0x0007FF, 0x000FFF, 0x0017FF, 0x001FFF, 0x0027FF, 0x002FFF, 0x0037FF, 0x003FFF, 0x0047FF, 0x004FFF, 0x0057FF, 0x005FFF, 0x0067FF, 0x006FFF, 0x0077FF, 0x007FFF, 0x0087FF, 0x008FFF, 0x0097FF, 0x009FFF, 0x00A7FF, 0x00AFFF, 0x00B7FF, 0x00BFFF, 0x00C7FF, 0x00CFFF, 0x00D7FF, 0x00DFFF, 0x00E7FF, 0x00EFFF, 0x00F7FF, 0x00FFFF, 0x00FFF7, 0x00FFEF, 0x00FFE7, 0x00FFDF, 0x00FFD7, 0x00FFCF, 0x00FFC7, 0x00FFBF, 0x00FFB7, 0x00FFAF, 0x00FFA7, 0x00FF9F, 0x00FF97, 0x00FF8F, 0x00FF87, 0x00FF7F, 0x00FF77, 0x00FF6F, 0x00FF67, 0x00FF5F, 0x00FF57, 0x00FF4F, 0x00FF47, 0x00FF3F, 0x00FF37, 0x00FF2F, 0x00FF27, 0x00FF1F, 0x00FF17, 0x00FF0F, 0x00FF07, 0x00FF00, 0x07FF00, 0x0FFF00, 0x17FF00, 0x1FFF00, 0x27FF00, 0x2FFF00, 0x37FF00, 0x3FFF00, 0x47FF00, 0x4FFF00, 0x57FF00, 0x5FFF00, 0x67FF00, 0x6FFF00, 0x77FF00, 0x7FFF00, 0x87FF00, 0x8FFF00, 0x97FF00, 0x9FFF00, 0xA7FF00, 0xAFFF00, 0xB7FF00, 0xBFFF00, 0xC7FF00, 0xCFFF00, 0xD7FF00, 0xDFFF00, 0xE7FF00, 0xEFFF00, 0xF7FF00, 0xFFFF00, 0xFFFB00, 0xFFF800, 0xFFF400, 0xFFF100, 0xFFED00, 0xFFEA00, 0xFFE700, 0xFFE300, 0xFFE000, 0xFFDC00, 0xFFD901, 0xFFD601, 0xFFD201, 0xFFCF01, 0xFFCB01, 0xFFC801, 0xFFC501, 0xFFC101, 0xFFBE01, 0xFFBA01, 0xFFB701, 0xFFB402, 0xFFB002, 0xFFAD02, 0xFFA902, 0xFFA602, 0xFFA302, 0xFF9F02, 0xFF9C02, 0xFF9802, 0xFF9502, 0xFF9203, 0xF68D02, 0xEE8802, 0xE68302, 0xDE7F02, 0xD57A02, 0xCD7502, 0xC57102, 0xBD6C02, 0xB46702, 0xAC6202, 0xA45E01, 0x9C5901, 0x945401, 0x8B5001, 0x834B01, 0x7B4601, 0x734101, 0x6A3D01, 0x623801, 0x5A3301, 0x522F00, 0x4A2A00, 0x412500, 0x392000, 0x311C00, 0x291700, 0x201200, 0x180E00, 0x100900, 0x080400, 0x000000},
                                    {0xFF0000, 0xFF0005, 0xFF000B, 0xFF0011, 0xFF0017, 0xFF001D, 0xFF0023, 0xFF0029, 0xFF002F, 0xFF0035, 0xFF003B, 0xFF0041, 0xFF0047, 0xFF004D, 0xFF0053, 0xFF0058, 0xFF005E, 0xFF0064, 0xFF006A, 0xFF0070, 0xFF0076, 0xFF007C, 0xFF0082, 0xFF0088, 0xFF008E, 0xFF0094, 0xFF009A, 0xFF00A0, 0xFF00A6, 0xFF00AB, 0xFF00B1, 0xFF00B7, 0xFF00BD, 0xFF00C3, 0xFF00C9, 0xFF00CF, 0xFF00D5, 0xFF00DB, 0xFF00E1, 0xFF00E7, 0xFF00ED, 0xFF00F3, 0xFF00F9, 0xFF00FF, 0xF900FF, 0xF300FF, 0xED00FF, 0xE700FF, 0xE100FF, 0xDB00FF, 0xD500FF, 0xCF00FF, 0xC900FF, 0xC300FF, 0xBD00FF, 0xB700FF, 0xB100FF, 0xAB00FF, 0xA600FF, 0xA000FF, 0x9A00FF, 0x9400FF, 0x8E00FF, 0x8800FF, 0x8200FF, 0x7C00FF, 0x7600FF, 0x7000FF, 0x6A00FF, 0x6400FF, 0x5E00FF, 0x5800FF, 0x5300FF, 0x4D00FF, 0x4700FF, 0x4100FF, 0x3B00FF, 0x3500FF, 0x2F00FF, 0x2900FF, 0x2300FF, 0x1D00FF, 0x1700FF, 0x1100FF, 0x0B00FF, 0x0500FF, 0x0000FF, 0x0005FF, 0x000BFF, 0x0011FF, 0x0017FF, 0x001DFF, 0x0023FF, 0x0029FF, 0x002FFF, 0x0035FF, 0x003BFF, 0x0041FF, 0x0047FF, 0x004DFF, 0x0053FF, 0x0058FF, 0x005EFF, 0x0064FF, 0x006AFF, 0x0070FF, 0x0076FF, 0x007CFF, 0x0082FF, 0x0088FF, 0x008EFF, 0x0094FF, 0x009AFF, 0x00A0FF, 0x00A6FF, 0x00ABFF, 0x00B1FF, 0x00B7FF, 0x00BDFF, 0x00C3FF, 0x00C9FF, 0x00CFFF, 0x00D5FF, 0x00DBFF, 0x00E1FF, 0x00E7FF, 0x00EDFF, 0x00F3FF, 0x00F9FF, 0x00FFFF, 0x00FFF8, 0x00FFF2, 0x00FFEC, 0x00FFE6, 0x00FFE0, 0x00FFDA, 0x00FFD4, 0x00FFCE, 0x00FFC8, 0x00FFC2, 0x00FFBC, 0x00FFB6, 0x00FFB0, 0x00FFAA, 0x00FFA3, 0x00FF9D, 0x00FF97, 0x00FF91, 0x00FF8B, 0x00FF85, 0x00FF7F, 0x00FF79, 0x00FF73, 0x00FF6D, 0x00FF67, 0x00FF61, 0x00FF5B, 0x00FF55, 0x00FF4E, 0x00FF48, 0x00FF42, 0x00FF3C, 0x00FF36, 0x00FF30, 0x00FF2A, 0x00FF24, 0x00FF1E, 0x00FF18, 0x00FF12, 0x00FF0C, 0x00FF06, 0x00FF00, 0x06FF00, 0x0CFF00, 0x12FF00, 0x18FF00, 0x1EFF00, 0x24FF00, 0x2AFF00, 0x30FF00, 0x36FF00, 0x3CFF00, 0x42FF00, 0x48FF00, 0x4EFF00, 0x55FF00, 0x5BFF00, 0x61FF00, 0x67FF00, 0x6DFF00, 0x73FF00, 0x79FF00, 0x7FFF00, 0x85FF00, 0x8BFF00, 0x91FF00, 0x97FF00, 0x9DFF00, 0xA3FF00, 0xAAFF00, 0xB0FF00, 0xB6FF00, 0xBCFF00, 0xC2FF00, 0xC8FF00, 0xCEFF00, 0xD4FF00, 0xDAFF00, 0xE0FF00, 0xE6FF00, 0xECFF00, 0xF2FF00, 0xF8FF00, 0xFFFF00, 0xFFF800, 0xFFF200, 0xFFEC00, 0xFFE600, 0xFFE000, 0xFFDA00, 0xFFD400, 0xFFCE00, 0xFFC800, 0xFFC200, 0xFFBC00, 0xFFB600, 0xFFB000, 0xFFAA00, 0xFFA300, 0xFF9D00, 0xFF9700, 0xFF9100, 0xFF8B00, 0xFF8500, 0xFF7F00, 0xFF7900, 0xFF7300, 0xFF6D00, 0xFF6700, 0xFF6100, 0xFF5B00, 0xFF5500, 0xFF4E00, 0xFF4800, 0xFF4200, 0xFF3C00, 0xFF3600, 0xFF3000, 0xFF2A00, 0xFF2400, 0xFF1E00, 0xFF1800, 0xFF1200, 0xFF0C00, 0xFF0600, 0xFF0000},
                                    {0x18FF00, 0x17FF03, 0x17FF07, 0x16FF0B, 0x16FF0E, 0x16FF12, 0x15FF16, 0x15FF19, 0x15FF1D, 0x14FF21, 0x14FF24, 0x13FF28, 0x13FF2C, 0x13FF2F, 0x12FF33, 0x12FF37, 0x12FF3B, 0x11FF3E, 0x11FF42, 0x10FF46, 0x10FF49, 0x10FF4D, 0x0FFF51, 0x0FFF54, 0x0FFF58, 0x0EFF5C, 0x0EFF5F, 0x0DFF63, 0x0DFF67, 0x0DFF6A, 0x0CFF6E, 0x0CFF72, 0x0CFF76, 0x0BFF79, 0x0BFF7D, 0x0AFF81, 0x0AFF84, 0x0AFF88, 0x09FF8C, 0x09FF8F, 0x09FF93, 0x08FF97, 0x08FF9A, 0x07FF9E, 0x07FFA2, 0x07FFA5, 0x06FFA9, 0x06FFAD, 0x06FFB1, 0x05FFB4, 0x05FFB8, 0x04FFBC, 0x04FFBF, 0x04FFC3, 0x03FFC7, 0x03FFCA, 0x03FFCE, 0x02FFD2, 0x02FFD5, 0x01FFD9, 0x01FFDD, 0x01FFE0, 0x00FFE4, 0x00FFE8, 0x00FFEC, 0x03FCE8, 0x07FAE4, 0x0BF8E0, 0x0FF6DD, 0x13F3D9, 0x17F1D5, 0x1BEFD2, 0x1FEDCE, 0x23EACA, 0x27E8C7, 0x2BE6C3, 0x2FE4BF, 0x33E1BC, 0x37DFB8, 0x3BDDB4, 0x3FDBB1, 0x43D8AD, 0x47D6A9, 0x4BD4A5, 0x4FD2A2, 0x53CF9E, 0x57CD9A, 0x5BCB97, 0x5FC993, 0x63C68F, 0x67C48C, 0x6BC288, 0x6FC084, 0x73BD81, 0x77BB7D, 0x7BB979, 0x7FB776, 0x83B472, 0x87B26E, 0x8BB06A, 0x8FAE67, 0x93AB63, 0x97A95F, 0x9BA75C, 0x9FA558, 0xA3A254, 0xA7A051, 0xAB9E4D, 0xAF9C49, 0xB39946, 0xB79742, 0xBB953E, 0xBF933B, 0xC39037, 0xC78E33, 0xCB8C2F, 0xCF8A2C, 0xD38728, 0xD78524, 0xDB8321, 0xDF811D, 0xE37E19, 0xE77C16, 0xEB7A12, 0xEF780E, 0xF3750B, 0xF77307, 0xFB7103, 0xFF6F00, 0xFF6D00, 0xFF6B00, 0xFF6900, 0xFF6800, 0xFF6601, 0xFF6401, 0xFF6201, 0xFF6101, 0xFF5F01, 0xFF5D02, 0xFF5B02, 0xFF5A02, 0xFF5802, 0xFF5602, 0xFF5403, 0xFF5303, 0xFF5103, 0xFF4F03, 0xFF4E03, 0xFF4C04, 0xFF4A04, 0xFF4804, 0xFF4704, 0xFF4504, 0xFF4305, 0xFF4105, 0xFF4005, 0xFF3E05, 0xFF3C05, 0xFF3A06, 0xFF3906, 0xFF3706, 0xFF3506, 0xFF3406, 0xFF3207, 0xFF3007, 0xFF2E07, 0xFF2D07, 0xFF2B07, 0xFF2908, 0xFF2708, 0xFF2608, 0xFF2408, 0xFF2208, 0xFF2009, 0xFF1F09, 0xFF1D09, 0xFF1B09, 0xFF1A09, 0xFF180A, 0xFF160A, 0xFF140A, 0xFF130A, 0xFF110A, 0xFF0F0B, 0xFF0D0B, 0xFF0C0B, 0xFF0A0B, 0xFF080B, 0xFF060C, 0xFF050C, 0xFF030C, 0xFF010C, 0xFF000D, 0xFB040C, 0xF7080C, 0xF40C0C, 0xF0100C, 0xEC140B, 0xE9180B, 0xE51C0B, 0xE1200B, 0xDE240B, 0xDA280A, 0xD62C0A, 0xD3300A, 0xCF340A, 0xCB380A, 0xC83C09, 0xC44009, 0xC04409, 0xBD4809, 0xB94C09, 0xB55008, 0xB25508, 0xAE5908, 0xAA5D08, 0xA76108, 0xA36507, 0x9F6907, 0x9C6D07, 0x987107, 0x947507, 0x917906, 0x8D7D06, 0x898106, 0x868506, 0x828905, 0x7E8D05, 0x7B9105, 0x779505, 0x739905, 0x709D04, 0x6CA104, 0x68A504, 0x65AA04, 0x61AE04, 0x5DB203, 0x5AB603, 0x56BA03, 0x52BE03, 0x4FC203, 0x4BC602, 0x47CA02, 0x44CE02, 0x40D202, 0x3CD602, 0x39DA01, 0x35DE01, 0x31E201, 0x2EE601, 0x2AEA01, 0x26EE00, 0x23F200, 0x1FF600, 0x1BFA00, 0x18FF00},
                                    {0x00FFFF, 0x00FCFF, 0x00F9FF, 0x00F6FF, 0x00F4FF, 0x00F1FF, 0x00EEFF, 0x00ECFF, 0x00E9FF, 0x00E6FF, 0x01E3FF, 0x01E1FF, 0x01DEFF, 0x01DBFF, 0x01D9FF, 0x01D6FF, 0x01D3FF, 0x01D1FF, 0x01CEFF, 0x02CBFF, 0x02C8FF, 0x02C6FF, 0x02C3FF, 0x02C0FF, 0x02BEFF, 0x02BBFF, 0x02B8FF, 0x02B6FF, 0x03B3FF, 0x03B0FF, 0x03ADFF, 0x03ABFF, 0x03A8FF, 0x03A5FF, 0x03A3FF, 0x03A0FF, 0x039DFF, 0x049AFF, 0x0498FF, 0x0495FF, 0x0492FF, 0x0490FF, 0x048DFF, 0x048AFF, 0x0488FF, 0x0485FF, 0x0582FF, 0x057FFF, 0x057DFF, 0x057AFF, 0x0577FF, 0x0575FF, 0x0572FF, 0x056FFF, 0x056DFF, 0x066AFF, 0x0667FF, 0x0664FF, 0x0662FF, 0x065FFF, 0x065CFF, 0x065AFF, 0x0657FF, 0x0654FF, 0x0752FF, 0x0A53FB, 0x0E54F7, 0x1256F3, 0x1657EF, 0x1A58EB, 0x1E5AE7, 0x225BE3, 0x265DDF, 0x295EDB, 0x2D5FD7, 0x3161D3, 0x3562CF, 0x3963CB, 0x3D65C7, 0x4166C3, 0x4568BF, 0x4869BB, 0x4C6AB7, 0x506CB3, 0x546DAF, 0x586EAB, 0x5C70A7, 0x6071A3, 0x64739F, 0x67749B, 0x6B7597, 0x6F7793, 0x73788F, 0x77798B, 0x7B7B87, 0x7F7C83, 0x837E7F, 0x867F7B, 0x8A8077, 0x8E8273, 0x92836F, 0x96846B, 0x9A8667, 0x9E8763, 0xA2895F, 0xA58A5B, 0xA98B57, 0xAD8D53, 0xB18E4F, 0xB58F4B, 0xB99147, 0xBD9243, 0xC1943F, 0xC4953B, 0xC89637, 0xCC9833, 0xD0992F, 0xD49A2B, 0xD89C27, 0xDC9D23, 0xE09F1F, 0xE3A01B, 0xE7A117, 0xEBA313, 0xEFA40F, 0xF3A50B, 0xF7A707, 0xFBA803, 0xFFAA00, 0xFFA900, 0xFFA800, 0xFFA700, 0xFFA600, 0xFFA500, 0xFFA400, 0xFFA400, 0xFFA300, 0xFFA200, 0xFFA100, 0xFFA000, 0xFF9F00, 0xFF9F00, 0xFF9E00, 0xFF9D00, 0xFF9C00, 0xFF9B00, 0xFF9A00, 0xFF9900, 0xFF9900, 0xFF9800, 0xFF9700, 0xFF9600, 0xFF9500, 0xFF9400, 0xFF9400, 0xFF9300, 0xFF9200, 0xFF9100, 0xFF9000, 0xFF8F00, 0xFF8F00, 0xFF8E00, 0xFF8D00, 0xFF8C00, 0xFF8B00, 0xFF8A00, 0xFF8900, 0xFF8900, 0xFF8800, 0xFF8700, 0xFF8600, 0xFF8500, 0xFF8400, 0xFF8400, 0xFF8300, 0xFF8200, 0xFF8100, 0xFF8000, 0xFF7F00, 0xFF7E00, 0xFF7E00, 0xFF7D00, 0xFF7C00, 0xFF7B00, 0xFF7A00, 0xFF7900, 0xFF7900, 0xFF7800, 0xFF7700, 0xFF7600, 0xFF7500, 0xFF7400, 0xFF7400, 0xFA7604, 0xF67808, 0xF27A0C, 0xEE7C10, 0xEA7F14, 0xE68118, 0xE2831C, 0xDE8520, 0xDA8724, 0xD68A28, 0xD28C2C, 0xCE8E30, 0xCA9034, 0xC69238, 0xC2953C, 0xBE9740, 0xBA9944, 0xB69B48, 0xB29D4C, 0xAEA050, 0xAAA255, 0xA5A459, 0xA1A65D, 0x9DA861, 0x99AB65, 0x95AD69, 0x91AF6D, 0x8DB171, 0x89B375, 0x85B679, 0x81B87D, 0x7DBA81, 0x79BC85, 0x75BF89, 0x71C18D, 0x6DC391, 0x69C595, 0x65C799, 0x61CA9D, 0x5DCCA1, 0x59CEA5, 0x55D0AA, 0x50D2AE, 0x4CD5B2, 0x48D7B6, 0x44D9BA, 0x40DBBE, 0x3CDDC2, 0x38E0C6, 0x34E2CA, 0x30E4CE, 0x2CE6D2, 0x28E8D6, 0x24EBDA, 0x20EDDE, 0x1CEFE2, 0x18F1E6, 0x14F3EA, 0x10F6EE, 0x0CF8F2, 0x08FAF6, 0x04FCFA, 0x00FFFF},
                                    {0xFE008E, 0xFD008B, 0xFD0089, 0xFD0087, 0xFD0085, 0xFD0083, 0xFD0081, 0xFD007F, 0xFD007D, 0xFD007A, 0xFD0078, 0xFD0076, 0xFD0074, 0xFD0072, 0xFD0070, 0xFD006E, 0xFD006C, 0xFD0069, 0xFD0067, 0xFD0065, 0xFD0063, 0xFD0061, 0xFD005F, 0xFD005D, 0xFD005B, 0xFD0058, 0xFD0056, 0xFD0054, 0xFD0052, 0xFD0050, 0xFD004E, 0xFD004C, 0xFD004A, 0xFD0047, 0xFD0045, 0xFD0043, 0xFD0041, 0xFD003F, 0xFD003D, 0xFD003B, 0xFD0039, 0xFD0036, 0xFD0034, 0xFD0032, 0xFD0030, 0xFD002E, 0xFD002C, 0xFD002A, 0xFD0028, 0xFD0025, 0xFD0023, 0xFD0021, 0xFD001F, 0xFD001D, 0xFD001B, 0xFD0019, 0xFD0017, 0xFD0014, 0xFD0012, 0xFD0010, 0xFD000E, 0xFD000C, 0xFD000A, 0xFD0008, 0xFD0006, 0xFB0305, 0xFA0705, 0xF80B05, 0xF70E05, 0xF51205, 0xF41605, 0xF31A05, 0xF11D05, 0xF02105, 0xEE2505, 0xED2904, 0xEB2C04, 0xEA3004, 0xE93404, 0xE73804, 0xE63B04, 0xE43F04, 0xE34304, 0xE14604, 0xE04A04, 0xDF4E04, 0xDD5203, 0xDC5503, 0xDA5903, 0xD95D03, 0xD86103, 0xD66403, 0xD56803, 0xD36C03, 0xD27003, 0xD07303, 0xCF7703, 0xCE7B02, 0xCC7E02, 0xCB8202, 0xC98602, 0xC88A02, 0xC68D02, 0xC59102, 0xC49502, 0xC29902, 0xC19C02, 0xBFA001, 0xBEA401, 0xBDA801, 0xBBAB01, 0xBAAF01, 0xB8B301, 0xB7B601, 0xB5BA01, 0xB4BE01, 0xB3C201, 0xB1C501, 0xB0C900, 0xAECD00, 0xADD100, 0xABD400, 0xAAD800, 0xA9DC00, 0xA7E000, 0xA6E300, 0xA4E700, 0xA3EB00, 0xA2EF00, 0x9FEE00, 0x9DEE00, 0x9AED00, 0x98ED00, 0x96EC00, 0x93EC00, 0x91EB00, 0x8FEB00, 0x8CEA00, 0x8AEA00, 0x87E900, 0x85E900, 0x83E800, 0x80E800, 0x7EE700, 0x7CE700, 0x79E600, 0x77E600, 0x74E500, 0x72E500, 0x70E400, 0x6DE400, 0x6BE300, 0x69E300, 0x66E200, 0x64E200, 0x61E100, 0x5FE100, 0x5DE000, 0x5AE000, 0x58DF00, 0x56DF00, 0x53DE00, 0x51DE00, 0x4EDD00, 0x4CDD00, 0x4ADC00, 0x47DC00, 0x45DB00, 0x43DB00, 0x40DA00, 0x3EDA00, 0x3BD900, 0x39D900, 0x37D800, 0x34D800, 0x32D700, 0x30D700, 0x2DD600, 0x2BD600, 0x28D500, 0x26D500, 0x24D400, 0x21D400, 0x1FD300, 0x1DD300, 0x1AD200, 0x18D200, 0x15D100, 0x13D100, 0x11D000, 0x0ED000, 0x0CCF00, 0x0ACF00, 0x0DCB02, 0x11C804, 0x15C506, 0x19C109, 0x1DBE0B, 0x21BB0D, 0x25B80F, 0x28B412, 0x2CB114, 0x30AE16, 0x34AA18, 0x38A71B, 0x3CA41D, 0x40A11F, 0x449D21, 0x479A24, 0x4B9726, 0x4F9328, 0x53902A, 0x578D2D, 0x5B8A2F, 0x5F8631, 0x638333, 0x668036, 0x6A7C38, 0x6E793A, 0x72763C, 0x76733F, 0x7A6F41, 0x7E6C43, 0x826945, 0x856548, 0x89624A, 0x8D5F4C, 0x915C4E, 0x955851, 0x995553, 0x9D5255, 0xA14E57, 0xA44B5A, 0xA8485C, 0xAC455E, 0xB04160, 0xB43E63, 0xB83B65, 0xBC3767, 0xC03469, 0xC3316C, 0xC72E6E, 0xCB2A70, 0xCF2772, 0xD32475, 0xD72077, 0xDB1D79, 0xDF1A7B, 0xE2177E, 0xE61380, 0xEA1082, 0xEE0D84, 0xF20987, 0xF60689, 0xFA038B, 0xFE008E},
                                    {0x1E00B0, 0x2101AD, 0x2502AA, 0x2804A7, 0x2C05A5, 0x2F07A2, 0x33089F, 0x360A9C, 0x3A0B9A, 0x3D0C97, 0x410E94, 0x440F91, 0x48118F, 0x4B128C, 0x4F1489, 0x521586, 0x561784, 0x591881, 0x5D197E, 0x601B7B, 0x641C79, 0x671E76, 0x6B1F73, 0x6E2170, 0x72226E, 0x75236B, 0x792568, 0x7C2665, 0x802863, 0x832960, 0x872B5D, 0x8A2C5A, 0x8E2E58, 0x922F55, 0x953052, 0x99324F, 0x9C334D, 0xA0354A, 0xA33647, 0xA73844, 0xAA3942, 0xAE3A3F, 0xB13C3C, 0xB53D39, 0xB83F37, 0xBC4034, 0xBF4231, 0xC3432E, 0xC6452C, 0xCA4629, 0xCD4726, 0xD14923, 0xD44A21, 0xD84C1E, 0xDB4D1B, 0xDF4F18, 0xE25016, 0xE65113, 0xE95310, 0xED540D, 0xF0560B, 0xF45708, 0xF75905, 0xFB5A02, 0xFF5C00, 0xFF5D00, 0xFF5F00, 0xFF6100, 0xFF6300, 0xFF6400, 0xFF6600, 0xFF6800, 0xFF6A00, 0xFF6B00, 0xFF6D00, 0xFF6F00, 0xFF7100, 0xFF7200, 0xFF7400, 0xFF7600, 0xFF7800, 0xFF7A00, 0xFF7B00, 0xFF7D00, 0xFF7F00, 0xFF8100, 0xFF8200, 0xFF8400, 0xFF8600, 0xFF8800, 0xFF8900, 0xFF8B00, 0xFF8D00, 0xFF8F00, 0xFF9000, 0xFF9200, 0xFF9400, 0xFF9600, 0xFF9800, 0xFF9900, 0xFF9B00, 0xFF9D00, 0xFF9F00, 0xFFA000, 0xFFA200, 0xFFA400, 0xFFA600, 0xFFA700, 0xFFA900, 0xFFAB00, 0xFFAD00, 0xFFAE00, 0xFFB000, 0xFFB200, 0xFFB400, 0xFFB600, 0xFFB700, 0xFFB900, 0xFFBB00, 0xFFBD00, 0xFFBE00, 0xFFC000, 0xFFC200, 0xFFC400, 0xFFC500, 0xFFC700, 0xFFC900, 0xFFCB00, 0xFFCD00, 0xFBCD02, 0xF7CE05, 0xF3CF08, 0xEFCF0B, 0xEBD00E, 0xE7D111, 0xE3D213, 0xDFD216, 0xDBD319, 0xD7D41C, 0xD3D41F, 0xCFD522, 0xCBD624, 0xC7D727, 0xC3D72A, 0xBFD82D, 0xBBD930, 0xB7D933, 0xB3DA36, 0xAFDB38, 0xABDC3B, 0xA7DC3E, 0xA3DD41, 0x9FDE44, 0x9BDE47, 0x97DF49, 0x93E04C, 0x8FE14F, 0x8BE152, 0x87E255, 0x83E358, 0x7FE45B, 0x7BE45D, 0x77E560, 0x73E663, 0x6FE666, 0x6BE769, 0x67E86C, 0x63E96E, 0x5FE971, 0x5BEA74, 0x57EB77, 0x53EB7A, 0x4FEC7D, 0x4BED7F, 0x47EE82, 0x43EE85, 0x3FEF88, 0x3BF08B, 0x37F08E, 0x33F191, 0x2FF293, 0x2BF396, 0x27F399, 0x23F49C, 0x1FF59F, 0x1BF5A2, 0x17F6A4, 0x13F7A7, 0x0FF8AA, 0x0BF8AD, 0x07F9B0, 0x03FAB3, 0x00FBB6, 0x00F7B5, 0x00F3B5, 0x01EFB5, 0x01EBB5, 0x02E7B5, 0x02E3B5, 0x03DFB5, 0x03DBB5, 0x04D7B5, 0x04D3B5, 0x05CFB4, 0x05CBB4, 0x06C7B4, 0x06C3B4, 0x07BFB4, 0x07BBB4, 0x08B7B4, 0x08B3B4, 0x09AFB4, 0x09ABB4, 0x0AA7B4, 0x0AA3B3, 0x0A9FB3, 0x0B9BB3, 0x0B97B3, 0x0C93B3, 0x0C8FB3, 0x0D8BB3, 0x0D87B3, 0x0E83B3, 0x0E7FB3, 0x0F7BB2, 0x0F77B2, 0x1073B2, 0x106FB2, 0x116BB2, 0x1167B2, 0x1263B2, 0x125FB2, 0x135BB2, 0x1357B2, 0x1453B2, 0x144FB1, 0x144BB1, 0x1547B1, 0x1543B1, 0x163FB1, 0x163BB1, 0x1737B1, 0x1733B1, 0x182FB1, 0x182BB1, 0x1927B0, 0x1923B0, 0x1A1FB0, 0x1A1BB0, 0x1B17B0, 0x1B13B0, 0x1C0FB0, 0x1C0BB0, 0x1D07B0, 0x1D03B0, 0x1E00B0},
                                    {0x33FFFF, 0x35FBFD, 0x37F8FB, 0x3AF5FA, 0x3CF2F8, 0x3EEFF7, 0x41EBF5, 0x43E8F3, 0x46E5F2, 0x48E2F0, 0x4ADFEF, 0x4DDBED, 0x4FD8EB, 0x52D5EA, 0x54D2E8, 0x56CFE7, 0x59CCE5, 0x5BC8E3, 0x5EC5E2, 0x60C2E0, 0x62BFDF, 0x65BCDD, 0x67B8DB, 0x69B5DA, 0x6CB2D8, 0x6EAFD7, 0x71ACD5, 0x73A8D3, 0x75A5D2, 0x78A2D0, 0x7A9FCF, 0x7D9CCD, 0x7F99CC, 0x8195CA, 0x8492C8, 0x868FC7, 0x898CC5, 0x8B89C4, 0x8D85C2, 0x9082C0, 0x927FBF, 0x957CBD, 0x9779BC, 0x9975BA, 0x9C72B8, 0x9E6FB7, 0xA06CB5, 0xA369B4, 0xA566B2, 0xA862B0, 0xAA5FAF, 0xAC5CAD, 0xAF59AC, 0xB156AA, 0xB452A8, 0xB64FA7, 0xB84CA5, 0xBB49A4, 0xBD46A2, 0xC042A0, 0xC23F9F, 0xC43C9D, 0xC7399C, 0xC9369A, 0xCC3399, 0xCC3698, 0xCD3997, 0xCE3C96, 0xCF3F95, 0xCF4295, 0xD04694, 0xD14993, 0xD24C92, 0xD34F91, 0xD35291, 0xD45690, 0xD5598F, 0xD65C8E, 0xD75F8D, 0xD7628D, 0xD8668C, 0xD9698B, 0xDA6C8A, 0xDB6F89, 0xDB7289, 0xDC7588, 0xDD7987, 0xDE7C86, 0xDF7F85, 0xDF8285, 0xE08584, 0xE18983, 0xE28C82, 0xE38F81, 0xE39281, 0xE49580, 0xE5997F, 0xE69C7E, 0xE79F7D, 0xE7A27D, 0xE8A57C, 0xE9A87B, 0xEAAC7A, 0xEBAF79, 0xEBB279, 0xECB578, 0xEDB877, 0xEEBC76, 0xEFBF75, 0xEFC275, 0xF0C574, 0xF1C873, 0xF2CC72, 0xF3CF71, 0xF3D271, 0xF4D570, 0xF5D86F, 0xF6DB6E, 0xF7DF6D, 0xF7E26D, 0xF8E56C, 0xF9E86B, 0xFAEB6A, 0xFBEF69, 0xFBF269, 0xFCF568, 0xFDF867, 0xFEFB66, 0xFFFF66, 0xFBFF65, 0xF8FF64, 0xF5FF63, 0xF2FF62, 0xEFFF62, 0xEBFF61, 0xE8FF60, 0xE5FF5F, 0xE2FF5E, 0xDFFF5E, 0xDBFF5D, 0xD8FF5C, 0xD5FF5B, 0xD2FF5A, 0xCFFF5A, 0xCCFF59, 0xC8FF58, 0xC5FF57, 0xC2FF56, 0xBFFF56, 0xBCFF55, 0xB8FF54, 0xB5FF53, 0xB2FF52, 0xAFFF52, 0xACFF51, 0xA8FF50, 0xA5FF4F, 0xA2FF4E, 0x9FFF4E, 0x9CFF4D, 0x99FF4C, 0x95FF4B, 0x92FF4A, 0x8FFF4A, 0x8CFF49, 0x89FF48, 0x85FF47, 0x82FF46, 0x7FFF46, 0x7CFF45, 0x79FF44, 0x75FF43, 0x72FF42, 0x6FFF42, 0x6CFF41, 0x69FF40, 0x66FF3F, 0x62FF3E, 0x5FFF3E, 0x5CFF3D, 0x59FF3C, 0x56FF3B, 0x52FF3A, 0x4FFF3A, 0x4CFF39, 0x49FF38, 0x46FF37, 0x42FF36, 0x3FFF36, 0x3CFF35, 0x39FF34, 0x36FF33, 0x33FF33, 0x33FF36, 0x33FF39, 0x33FF3C, 0x33FF3F, 0x33FF43, 0x33FF46, 0x33FF49, 0x33FF4C, 0x33FF50, 0x33FF53, 0x33FF56, 0x33FF59, 0x33FF5D, 0x33FF60, 0x33FF63, 0x33FF66, 0x33FF6A, 0x33FF6D, 0x33FF70, 0x33FF73, 0x33FF77, 0x33FF7A, 0x33FF7D, 0x33FF80, 0x33FF83, 0x33FF87, 0x33FF8A, 0x33FF8D, 0x33FF90, 0x33FF94, 0x33FF97, 0x33FF9A, 0x33FF9D, 0x33FFA1, 0x33FFA4, 0x33FFA7, 0x33FFAA, 0x33FFAE, 0x33FFB1, 0x33FFB4, 0x33FFB7, 0x33FFBB, 0x33FFBE, 0x33FFC1, 0x33FFC4, 0x33FFC7, 0x33FFCB, 0x33FFCE, 0x33FFD1, 0x33FFD4, 0x33FFD8, 0x33FFDB, 0x33FFDE, 0x33FFE1, 0x33FFE5, 0x33FFE8, 0x33FFEB, 0x33FFEE, 0x33FFF2, 0x33FFF5, 0x33FFF8, 0x33FFFB, 0x33FFFF},
                                    {0x27F550, 0x28F251, 0x2AEF53, 0x2CEC54, 0x2EE956, 0x2FE757, 0x31E459, 0x33E15A, 0x35DE5C, 0x37DB5D, 0x38D95F, 0x3AD660, 0x3CD362, 0x3ED063, 0x3FCE65, 0x41CB66, 0x43C868, 0x45C56A, 0x47C26B, 0x48C06D, 0x4ABD6E, 0x4CBA70, 0x4EB771, 0x50B473, 0x51B274, 0x53AF76, 0x55AC77, 0x57A979, 0x58A77A, 0x5AA47C, 0x5CA17D, 0x5E9E7F, 0x609B80, 0x619982, 0x639684, 0x659385, 0x679087, 0x698D88, 0x6A8B8A, 0x6C888B, 0x6E858D, 0x70828E, 0x718090, 0x737D91, 0x757A93, 0x777794, 0x797496, 0x7A7297, 0x7C6F99, 0x7E6C9A, 0x80699C, 0x82679E, 0x7F699F, 0x7D6BA0, 0x7B6EA2, 0x7970A3, 0x7773A5, 0x7475A6, 0x7278A7, 0x707AA9, 0x6E7DAA, 0x6C7FAC, 0x6982AD, 0x6784AE, 0x6587B0, 0x6389B1, 0x618CB3, 0x5E8EB4, 0x5C91B6, 0x5A93B7, 0x5896B8, 0x5698BA, 0x539BBB, 0x519DBD, 0x4FA0BE, 0x4DA2BF, 0x4BA5C1, 0x48A7C2, 0x46AAC4, 0x44ACC5, 0x42AFC6, 0x40B1C8, 0x3DB4C9, 0x3BB6CB, 0x39B9CC, 0x37BBCE, 0x35BECF, 0x32C0D0, 0x30C3D2, 0x2EC5D3, 0x2CC8D5, 0x2ACAD6, 0x27CDD7, 0x25CFD9, 0x23D2DA, 0x21D4DC, 0x1FD7DD, 0x1CD9DE, 0x1ADCE0, 0x18DEE1, 0x16E1E3, 0x14E3E4, 0x12E6E6, 0x16E4E1, 0x1BE2DC, 0x1FE0D8, 0x24DED3, 0x29DCCF, 0x2DDACA, 0x32D9C6, 0x37D7C1, 0x3BD5BD, 0x40D3B8, 0x45D1B4, 0x49CFAF, 0x4ECEAB, 0x53CCA6, 0x57CAA2, 0x5CC89D, 0x61C699, 0x65C494, 0x6AC290, 0x6EC18B, 0x73BF87, 0x78BD82, 0x7CBB7E, 0x81B979, 0x86B775, 0x8AB670, 0x8FB46C, 0x94B267, 0x98B063, 0x9DAE5E, 0xA2AC5A, 0xA6AB55, 0xABA951, 0xB0A74C, 0xB4A548, 0xB9A343, 0xBDA13F, 0xC29F3A, 0xC79E36, 0xCB9C31, 0xD09A2D, 0xD59828, 0xD99624, 0xDE941F, 0xE3931B, 0xE79116, 0xEC8F12, 0xF18D0D, 0xF58B09, 0xFA8904, 0xFF8800, 0xFA8502, 0xF68205, 0xF28008, 0xED7D0B, 0xE97A0E, 0xE57810, 0xE17513, 0xDC7216, 0xD87019, 0xD46D1C, 0xD06A1E, 0xCB6821, 0xC76524, 0xC36227, 0xBF5F2A, 0xBA5D2C, 0xB65A2F, 0xB25732, 0xAE5535, 0xA95238, 0xA5503A, 0xA14D3D, 0x9D4A40, 0x984843, 0x944546, 0x904248, 0x8C404B, 0x873D4E, 0x833A51, 0x7F3854, 0x7B3556, 0x763259, 0x722F5C, 0x6E2D5F, 0x6A2A62, 0x652764, 0x612567, 0x5D226A, 0x59206D, 0x541D70, 0x501A72, 0x4C1875, 0x481578, 0x43127B, 0x3F107E, 0x3B0D80, 0x370A83, 0x320886, 0x2E0589, 0x2A028C, 0x26008F, 0x26048D, 0x26098C, 0x260E8B, 0x26138A, 0x261888, 0x261C87, 0x262186, 0x262685, 0x262B83, 0x263082, 0x263481, 0x263980, 0x263E7E, 0x26437D, 0x26487C, 0x264C7B, 0x26517A, 0x265678, 0x265B77, 0x266076, 0x266475, 0x266973, 0x266E72, 0x267371, 0x267870, 0x267C6E, 0x26816D, 0x26866C, 0x268B6B, 0x269069, 0x269468, 0x269967, 0x269E66, 0x26A365, 0x26A863, 0x26AC62, 0x26B161, 0x26B660, 0x26BB5E, 0x26C05D, 0x26C45C, 0x26C95B, 0x26CE59, 0x26D358, 0x26D857, 0x26DC56, 0x26E154, 0x26E653, 0x26EB52, 0x26F051, 0x27F550},
                                    {0x285C2F, 0x275F2E, 0x26632D, 0x25672C, 0x246B2B, 0x236E2A, 0x227229, 0x217628, 0x207A27, 0x1F7E26, 0x1E8125, 0x1D8525, 0x1C8924, 0x1B8D23, 0x1A9122, 0x1A9421, 0x199820, 0x189C1F, 0x17A01E, 0x16A41D, 0x15A71C, 0x14AB1B, 0x13AF1B, 0x12B31A, 0x11B619, 0x10BA18, 0x0FBE17, 0x0EC216, 0x0DC615, 0x0DC914, 0x0CCD13, 0x0BD112, 0x0AD511, 0x09D911, 0x08DC10, 0x07E00F, 0x06E40E, 0x05E80D, 0x04EC0C, 0x03EF0B, 0x02F30A, 0x01F709, 0x00FB08, 0x00FF08, 0x05FD09, 0x0AFB0A, 0x0FF90B, 0x14F80C, 0x19F60D, 0x1EF40E, 0x23F20F, 0x28F110, 0x2DEF11, 0x32ED12, 0x38EC13, 0x3DEA14, 0x42E815, 0x47E616, 0x4CE517, 0x51E318, 0x56E119, 0x5BE01A, 0x60DE1B, 0x65DC1C, 0x6ADA1D, 0x70D91F, 0x75D720, 0x7AD521, 0x7FD322, 0x84D223, 0x89D024, 0x8ECE25, 0x93CD26, 0x98CB27, 0x9DC928, 0xA2C729, 0xA8C62A, 0xADC42B, 0xB2C22C, 0xB7C12D, 0xBCBF2E, 0xC1BD2F, 0xC6BB30, 0xCBBA31, 0xD0B832, 0xD5B633, 0xDBB535, 0xDBB039, 0xDCAC3E, 0xDDA843, 0xDEA447, 0xDF9F4C, 0xE09B51, 0xE09755, 0xE1935A, 0xE28F5F, 0xE38A63, 0xE48668, 0xE5826D, 0xE57E72, 0xE67A76, 0xE7757B, 0xE87180, 0xE96D84, 0xEA6989, 0xEA658E, 0xEB6092, 0xEC5C97, 0xED589C, 0xEE54A1, 0xEF4FA5, 0xEF4BAA, 0xF047AF, 0xF143B3, 0xF23FB8, 0xF33ABD, 0xF436C1, 0xF432C6, 0xF52ECB, 0xF62AD0, 0xF725D4, 0xF821D9, 0xF91DDE, 0xF919E2, 0xFA15E7, 0xFB10EC, 0xFC0CF0, 0xFD08F5, 0xFE04FA, 0xFF00FF, 0xF900FB, 0xF300F8, 0xED00F5, 0xE800F2, 0xE200EF, 0xDC00EC, 0xD600E9, 0xD100E6, 0xCB00E3, 0xC500E0, 0xBF00DC, 0xBA00D9, 0xB400D6, 0xAE00D3, 0xA800D0, 0xA300CD, 0x9D00CA, 0x9700C7, 0x9100C4, 0x8C00C1, 0x8600BE, 0x8000BA, 0x7B00B7, 0x7500B4, 0x6F00B1, 0x6900AE, 0x6400AB, 0x5E00A8, 0x5800A5, 0x5200A2, 0x4D009F, 0x47009B, 0x410098, 0x3B0095, 0x360092, 0x30008F, 0x2A008C, 0x240089, 0x1F0086, 0x190083, 0x130080, 0x0E017D, 0x12067A, 0x170C77, 0x1C1274, 0x211871, 0x261E6E, 0x2B236B, 0x302968, 0x352F65, 0x3A3562, 0x3F3B5F, 0x44405C, 0x494659, 0x4E4C56, 0x535253, 0x575850, 0x5C5D4D, 0x61634A, 0x666947, 0x6B6F44, 0x707541, 0x757B3E, 0x7A803B, 0x7F8638, 0x848C35, 0x899232, 0x8E982F, 0x939D2C, 0x98A329, 0x9CA926, 0xA1AF23, 0xA6B520, 0xABBA1D, 0xB0C01A, 0xB5C617, 0xBACC14, 0xBFD211, 0xC4D70E, 0xC9DD0B, 0xCEE308, 0xD3E905, 0xD8EF02, 0xDDF500, 0xD8F101, 0xD4ED02, 0xD0EA03, 0xCBE604, 0xC7E205, 0xC3DF06, 0xBEDB07, 0xBAD708, 0xB6D40A, 0xB1D00B, 0xADCC0C, 0xA9C90D, 0xA4C50E, 0xA0C20F, 0x9CBE10, 0x98BA11, 0x93B713, 0x8FB314, 0x8BAF15, 0x86AC16, 0x82A817, 0x7EA418, 0x79A119, 0x759D1A, 0x71991B, 0x6C961D, 0x68921E, 0x648F1F, 0x608B20, 0x5B8721, 0x578422, 0x538023, 0x4E7C24, 0x4A7926, 0x467527, 0x417128, 0x3D6E29, 0x396A2A, 0x34662B, 0x30632C, 0x2C5F2D, 0x285C2F},
                                    {0x955BBD, 0x935DBB, 0x915FB9, 0x8F61B8, 0x8E64B6, 0x8C66B5, 0x8A68B3, 0x886BB1, 0x876DB0, 0x856FAE, 0x8372AD, 0x8174AB, 0x8076A9, 0x7E79A8, 0x7C7BA6, 0x7A7DA5, 0x7980A3, 0x7782A1, 0x7584A0, 0x73869E, 0x72899D, 0x708B9B, 0x6E8D99, 0x6C9098, 0x6B9296, 0x699495, 0x679793, 0x659991, 0x649B90, 0x629E8E, 0x60A08D, 0x5EA28B, 0x5DA58A, 0x5BA788, 0x59A986, 0x57AB85, 0x56AE83, 0x54B082, 0x52B280, 0x50B57E, 0x4FB77D, 0x4DB97B, 0x4BBC7A, 0x49BE78, 0x48C076, 0x46C375, 0x44C573, 0x42C772, 0x41CA70, 0x3FCC6E, 0x3DCE6D, 0x3BD06B, 0x3AD36A, 0x38D568, 0x36D766, 0x34DA65, 0x33DC63, 0x31DE62, 0x2FE160, 0x2DE35E, 0x2CE55D, 0x2AE85B, 0x28EA5A, 0x26EC58, 0x25EF57, 0x27EB55, 0x29E754, 0x2CE453, 0x2EE052, 0x31DD50, 0x33D94F, 0x36D54E, 0x38D24D, 0x3BCE4C, 0x3DCB4A, 0x40C749, 0x42C448, 0x45C047, 0x47BC46, 0x4AB944, 0x4CB543, 0x4FB242, 0x51AE41, 0x54AB40, 0x56A73E, 0x59A33D, 0x5BA03C, 0x5E9C3B, 0x60993A, 0x639538, 0x659137, 0x688E36, 0x6A8A35, 0x6D8734, 0x6F8332, 0x728031, 0x747C30, 0x76782F, 0x79752E, 0x7B712C, 0x7E6E2B, 0x806A2A, 0x836729, 0x856328, 0x885F26, 0x8A5C25, 0x8D5824, 0x8F5523, 0x925122, 0x944D20, 0x974A1F, 0x99461E, 0x9C431D, 0x9E3F1C, 0xA13C1A, 0xA33819, 0xA63418, 0xA83117, 0xAB2D16, 0xAD2A14, 0xB02613, 0xB22312, 0xB51F11, 0xB71B10, 0xBA180E, 0xBC140D, 0xBF110C, 0xC10D0B, 0xC40A0A, 0xC1090C, 0xBE090E, 0xBB0910, 0xB80912, 0xB50914, 0xB20916, 0xAF0818, 0xAC081A, 0xA9081C, 0xA6081E, 0xA30820, 0xA00822, 0x9D0724, 0x9A0726, 0x970728, 0x94072A, 0x91072C, 0x8E072E, 0x8B0730, 0x880632, 0x850634, 0x830636, 0x800638, 0x7D063A, 0x7A063C, 0x77053E, 0x740540, 0x710542, 0x6E0544, 0x6B0546, 0x680548, 0x65054B, 0x62044D, 0x5F044F, 0x5C0451, 0x590453, 0x560455, 0x530457, 0x500359, 0x4D035B, 0x4A035D, 0x47035F, 0x450361, 0x420363, 0x3F0265, 0x3C0267, 0x390269, 0x36026B, 0x33026D, 0x30026F, 0x2D0271, 0x2A0173, 0x270175, 0x240177, 0x210179, 0x1E017B, 0x1B017D, 0x18007F, 0x150081, 0x120083, 0x0F0085, 0x0C0087, 0x090089, 0x07008C, 0x09018C, 0x0B028D, 0x0D048E, 0x10058F, 0x12078F, 0x140890, 0x160A91, 0x190B92, 0x1B0D93, 0x1D0E93, 0x1F0F94, 0x221195, 0x241296, 0x261496, 0x281597, 0x2B1798, 0x2D1899, 0x2F1A9A, 0x311B9A, 0x341C9B, 0x361E9C, 0x381F9D, 0x3A219D, 0x3D229E, 0x3F249F, 0x4125A0, 0x4327A1, 0x4628A1, 0x4829A2, 0x4A2BA3, 0x4C2CA4, 0x4F2EA4, 0x512FA5, 0x5331A6, 0x5532A7, 0x5834A8, 0x5A35A8, 0x5C36A9, 0x5E38AA, 0x6139AB, 0x633BAB, 0x653CAC, 0x673EAD, 0x6A3FAE, 0x6C41AF, 0x6E42AF, 0x7043B0, 0x7345B1, 0x7546B2, 0x7748B2, 0x7949B3, 0x7C4BB4, 0x7E4CB5, 0x804EB6, 0x824FB6, 0x8550B7, 0x8752B8, 0x8953B9, 0x8B55B9, 0x8E56BA, 0x9058BB, 0x9259BC, 0x955BBD}};
    int *board = board_obj->get_board();
    float *board_float = board_obj->get_board_float();
    int width = board_obj->get_cell_width();
    int height = board_obj->get_cell_height();
    if(draw_smooth) {
        int color;
        if(draw_colors) {
            for(int j = 0; j < height; j++) {
                for(int i = 0; i < width; i++) {
                    //if we're alive modulo the age of the cell by the number of colors to get which color to draw and draw it
                    if(board[j*width+i] > 0)
                        set_pixel(i, j, colors[color_scheme][((board[j*width+i]+alive_offset)/color_speed_divisor) & 255]);
                    else //do the same if we're dead, but with negative age instead
                        set_pixel(i, j, colors[color_scheme][((-board[j*width+i]+dead_offset)/color_speed_divisor) & 255]);
                }
            }
        }
        else {
            for(int j = 0; j < height; j++) {
                for(int i = 0; i < width; i++) {
                    color = 255 * board_float[j*width+i];
                    set_pixel(i, j, color | color << 8 | color << 16);
                }
            }
        }
    }
    else {
        //if we're drawing in color
        if(draw_colors) {
            //go over the entire board
            for(int j = 0; j < height; j++) {
                for(int i = 0; i < width; i++) {
                    //if we're alive modulo the age of the cell by the number of colors to get which color to draw and draw it
                    if(board[j*width+i] > 0)
                        set_pixel(i, j, colors[color_scheme][((board[j*width+i]+alive_offset)) & 255]);
                    else //do the same if we're dead, but with negative age instead
                        set_pixel(i, j, colors[color_scheme][((-board[j*width+i]+dead_offset)) & 255]);
                }
            }
        }
        //if we're doing black and white
        else {
            //iterate over the whole board
            for(int j = 0; j < height; j++) {
                for(int i = 0; i < width; i++) {
                    //and draw white if alive
                    if(board[j*width+i] > 0)
                        set_pixel(i, j, 0xFFFFFF);
                    //and black if dead
                    else
                        set_pixel(i, j, 0x000000);
                }
            }
        }
    }

}

void Screen::set_color_scheme(int scheme) {
    color_scheme = scheme;
}

//randomly generates the color offsets and ruleset.
void Screen::reset_colors() {
    dead_offset = rand() % 256;
    alive_offset = rand() % 256;

}


void Screen::flip_draw_colors() {
    draw_colors = !draw_colors;
}

void Screen::flip_draw_smooth() {
    draw_smooth = !draw_smooth;
}


void Screen::set_color_speed_divisor(uint8_t new_color_speed_divisor) {
    color_speed_divisor = new_color_speed_divisor;
}

void Screen::update_window() {
    SDL_UpdateWindowSurface(window);

}

